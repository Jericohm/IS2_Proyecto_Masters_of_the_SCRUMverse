<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Archivo Dockerfile</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor" crossorigin="anonymous">
  </head>
  <body style="background-color: #0db7ed;">
    <div class="container-fluid bg-dark py-4">
      <div class="container text-white">
        <h1 align = "center" class="display-4"><b>Archivo DockerFile</b></h1>
      </div>

    </div>

    <div class="container bg-info py-5 shadow-lg p-3 mb-5  rounded">
      <h1><b><i>Unidad fundamental del ecosistema Docker</i></b></h1><br>
      <p align = "justify" class="lead"><b>Un <b>DockerFile</b> es un documento de texto que contiene todos los comandos que queramos ejecutar en la linea de comandos para armar una imágen. Esta imágen se creará mediante el comando docker build que irá siguiendo las instrucciones.</b></p>
      <p align = "justify" class="lead"><b>Antes de hablar de los Dockerfiles vamos a hablar un poco del comando docker build. El <i><b>comando docker build</b></i> arma una imágen siguiendo las instrucciones de un DockerFile que se puede encontrar en el directorio actual o un repositorio.</b></p>
      <p align = "justify" class="lead"><b>La creación de la imágen <i><b>es ejecutada por el daemon de Docker.</b></i> Es importante tener en cuenta que docker build le manda todo el contexto del directorio actual al daemon, por lo que es buena práctica colocar el DockerFile en un directorio limpio y agregar los archivos necesarios en ese directorio en caso de ser necesario.</b></p>
      <p align = "justify" class="lead"><b>El Docker Daemon corre las instrucciones en un Dockerfile linea por linea y va lanzando los resultados en pantalla. Un punto importante es que <b>cada instrucción es ejecutada en nuevas imágenes</b>, hasta que muestra el ID de la imágen resultante una vez finalizada las instrucciones. En otras palabras, el Docker daemon va creando <b>imágenes intermedias durante la creación de la imágen.</b></b></p>
      <br><h4 align = "center"><b><i>¿Cómo nos ayudan las Imágenes intermedias o "Cache"?</i></b></h4><br>
      <p align = "justify" class="lead"><b>Si por alguna razón la creación de la imágen falla, ya sea por un comando mal digitado en el archivo, o lo que sea, cuando corregimos el Dockerfile, este no iniciará todo el proceso nuevamente, sino, que hará uso de las imágenes intermedias, y continuará la creación en el punto donde falló.</b></p>

      <p align = "justify" class = "lead"><b> A continuación se muestra cómo se verá su flujo de trabajo del Dockerfile.</b>
        <ul>
          <li align = "justify" >Cree un Dockerfile y mencione las instrucciones para crear su imagen de Docker.</li>
          <li align = "justify" >Ejecute el comando docker build que creará una imagen de docker.</li>
          <li align = "justify" >Ahora que la imagen de la ventana acoplable está lista para usarse, use el comando de ejecución de la ventana acoplable para crear contenedores.</li>
        </ul>
      </p>

      <img src='/css/{{img}}' class="img-rounded mx-auto d-block" alt="Dockerfile">
    </div>

<footer class="footer mt-auto py-3 bg-light">
  <div class="container">
    <span class="text-muted">Conceptos Docker</span>
  </div>
</footer>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2" crossorigin="anonymous"></script>
  </body>
</html>
